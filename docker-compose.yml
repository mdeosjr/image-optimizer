services:
  mongo:
    image: mongo:7
    container_name: mongo
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - mongo_data:/data/db
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 10

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10

  api:
    build:
      context: .
      dockerfile: src/api/Dockerfile
    container_name: image-optimizer-api
    restart: always
    env_file:
      - ./src/api/.env
    ports:
      - '3000:3000'
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./tmp/uploads:/tmp/uploads
      - ./optimized:/optimized

  worker:
    build:
      context: .
      dockerfile: src/worker/Dockerfile
    container_name: image-optimizer-worker
    restart: always
    env_file:
      - ./src/worker/.env
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./tmp/uploads:/tmp/uploads
      - ./optimized:/optimized

volumes:
  mongo_data:

networks:
  app-network:
    driver: bridge
